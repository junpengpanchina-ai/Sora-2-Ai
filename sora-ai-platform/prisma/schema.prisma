// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Subscription fields
  subscriptionId String?
  subscriptionStatus String? // active, canceled, past_due, etc.
  subscriptionPlan String? // basic, pro, enterprise
  subscriptionEndsAt DateTime?
  
  accounts Account[]
  sessions Session[]
  videos   Video[]
  payments Payment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id          String   @id @default(cuid())
  title       String?
  prompt       String
  url         String?
  status      String   @default("pending") // pending, processing, completed, failed
  progress    Int      @default(0)
  duration    Int?     // in seconds
  aspectRatio String?  // 16:9, 9:16
  size        String?  // small, large
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                String   @id @default(cuid())
  stripePaymentId   String   @unique // Stripe payment intent ID
  stripeSessionId   String?  // Stripe checkout session ID
  stripeSubscriptionId String? // Stripe subscription ID
  amount            Int      // 金额（分）
  currency          String   @default("cny") // 货币
  status            String   // pending, succeeded, failed, canceled, refunded
  paymentMethod     String?  // card, alipay, wechat
  description       String?  // 支付描述
  
  // 退款相关
  refundedAmount    Int      @default(0) // 已退款金额（分）
  refundedAt        DateTime? // 退款时间
  refundReason      String?  // 退款原因
  
  // 关联信息
  plan              String?  // basic, pro, enterprise
  billingPeriod     String?  // monthly, yearly
  
  // 时间戳
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  paidAt            DateTime? // 支付成功时间
  
  // 关联用户
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([stripePaymentId])
  @@index([status])
  @@index([createdAt])
}
